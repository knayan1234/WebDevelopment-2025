One of the most powerful and flexible hooks for state management is useReducer . useReducer is a hook that allows you to manage state using a reducer function . The reducer function takes the current state and an action, and returns a new state based on the action type.

const [state, dispatch] = useReducer(reducer, initialState);

reducer: A function that determines the next state based on the current state and an action.
initialState: The initial state value.
state: The current state.
dispatch: A function to send actions to the reducer.

import React, { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      throw new Error();
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div> 
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
}

export default Counter;
In this example, the reducer function handles the logic for incrementing and decrementing the counter. The dispatch function is used to send actions to the reducer.



The useReducer hook is an alternative to the useState hook that is preferred when you have complex state logic. It is useful when the state transitions depend on previous state values or when you need to handle actions that can update the state differently.


useState is used for simple state updates where you only need to store one value (e.g., numbers, strings).
useReducer is used for more complex state logic, such as managing state transitions involving multiple sub-values.
