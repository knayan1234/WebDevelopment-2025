Tailwind CSS

Tailwind CSS is a modern, utility-first class framework that allows developers to style their websites directly within HTML using concise utility classes. Unlike traditional CSS, Tailwind CSS promotes rapid development by eliminating the need to write custom styles for every component.

Tailwind CSS stands out:
1.Utility-first approach
2.Responsive by default
3.Granular control

Tailwind CSS stands out from traditional frameworks like Bootstrap or Foundation because of its utility-first methodology, which offers light weightcode

tailwind we can either install using npm or can use CDN also


shadCN

A UI component library built using Tailwind, Radix UI, and more . Prebuilt, accessible React components. shadCN requires Tailwind
Built-in accessibility via Radix UI

ShadCN is not a Tailwind alternative — it uses Tailwind under the hood.
You typically use Tailwind + ShadCN together in a project.


 When to use Tailwind CSS
1.want full control over the UI.
2.enjoy building components from scratch.
3.want lightweight styling with no extra JavaScript.
4.You are working on a custom design system.

When to use ShadCN UI
1.want ready-to-use, accessible components.
2. working on a React + Tailwind project.
3.want a consistent design system that’s easy to modify.
4.want fast development without sacrificing customization.


tailwind means we need to write and style using classes but shadCN is we need to copy paste the code for component first . if button need to create one component and copy paste the code then we can use it in our code with the reusing parameters like variant and all . in the copy pasted code we can change or add extra styling as well

installing tailwind
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p


but above lines will throw error depends on project setup

in those cases
npm install -D tailwindcss@3 postcss@8 autoprefixer@10

manually create and update files at root of project

tailwind.config.js
// tailwind.config.js
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
}


postcss.config.js
// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

index.css
@tailwind base;
@tailwind components;
@tailwind utilities;




for shadCN , its build on top of tailwind
ShadCN UI is not a traditional NPM library.
Instead, it gives you copyable component code (like Button, Dialog, etc.) that you own and manage in your own codebase.

npm install class-variance-authority clsx tailwind-merge

src/lib/utils.js

import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}


src/components/ui/button.jsx
copied code from shadCN



in nextjs and typescript combination its ready to use by installing the npm command for each component , (Button ,label etc) but if app created using CRA then need to replace @ with . in import statements and need to create extra files and add codes manually




Tailwind vs CSS Modules

		Tailwind			 CSSModule

Approach -  Utility-first (classes in JSX)      Scoped CSS per component (traditional CSS) 

Syntax  -    `className="bg-red-500 p-4"`         `className={styles.container}` 

Scoping -    Global classes, but no conflicts due to naming    Auto-scoped — avoids class name collisions

Speed of Development-  Very fast for prototyping and standard layouts  -  Slightly slower — more typing, more switching files

Bundle size      -       Small (purges unused classes by default)       -  Can be large if many styles are unused              

Integration with ShadCN -  Required — ShadCN is built on Tailwind   - Not compatible — you'd need to rewrite styles

these are the main differences from modules css and tailwind


tailwind


export default function Card() {
  return (
    <div className="bg-white p-4 rounded shadow hover:bg-gray-100">
      <h2 className="text-xl font-semibold">Title</h2>
    </div>
  );
}


module.css

.card {
  background-color: white;
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.card:hover {
  background-color: #f3f4f6;
}

.title {
  font-size: 1.25rem;
  font-weight: 600;
}


import styles from './Card.module.css';

export default function Card() {
  return (
    <div className={styles.card}>
      <h2 className={styles.title}>Title</h2>
    </div>
  );
}


 Use Tailwind CSS if:
You want speed, consistency, and utility classes
You're using ShadCN UI, Next.js, or modern UI libraries
You’re building UIs with lots of responsive and interactive states

Use CSS Modules if:
You prefer traditional CSS syntax
You want clean separation of concerns
You need full custom styling and dynamic animations
