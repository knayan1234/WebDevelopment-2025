15th July

To create a react app we can use full stack frameworks so it will be having many libraries to 
get features done 

To create a basic react app 
npx create-react-app my-app
or

first we need to install a build tool (Vite).
These tools are helpful in such a way that it provide features to package and run sorce code
npm create vite@latest my-app -- --template react

command to run
npm start


vite is taken over create-react-app because creat.. using webpacks and it takes time for small changes 
due to webpacks bundles entire app but vite using ES6 modules so it will start instantly and only 
loads when needed

creat.. will do a full rebuild but vite only updates modules we changed in browser



jsx -JavaScript XML
JSX is a syntax extension, while React is a JavaScript library.these are two separate things can use together or separately


Allowing to write HTML inside JS(Declarative UI)
JSX helps us in such a way that instead of using js alone form creating elements using create element to complex UIfetaures by using JSX its easy to do
but browser dont understand this and we need tools like Babel to convert it to proper js

one of the main difference in JSX is class to className like that attributes follow camelCase

JSX not rendered by browser . JSX -> JS Obj by tools like babel . this JS obj act as virtual Obj and later update real DOM

why JSX? Declarative UI , dynamic content {} , cleaner syntax


rules followed in JSx = should return single root element , close all tags, follows camelCase,



Babel

js compiler 
converts JSX into standard JavaScript that browsers can understand.
3 stages of babel transformation -parses the JavaScript code into an Abstract Syntax Tree (AST),
Transformation(Babel applies various plugins to the AST to convert the code into a desired format),Babel generates JavaScript code from the transformed AST
babel is atranspiler because it convert from one version to another version of same language

example of babel convertion

import { profile } from "../data-files/profileDetails";
import styles from './ProfileCard.module.css';
function ProfileCard(){
return(
    <div className={styles.container}>
        <div className={styles.content}>
        <div >Name : {profile.name}</div>
        <div> Title : {profile.title}</div>
        <button>View Profile</button>
        </div>
    </div>
 )
}

export default ProfileCard;

to

import { profile } from "../data-files/profileDetails";
import styles from './ProfileCard.module.css';
import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
function ProfileCard() {
  return /*#__PURE__*/_jsx("div", {
    className: styles.container,
    children: /*#__PURE__*/_jsxs("div", {
      className: styles.content,
      children: [/*#__PURE__*/_jsxs("div", {
        children: ["Name : ", profile.name]
      }), /*#__PURE__*/_jsxs("div", {
        children: [" Title : ", profile.title]
      }), /*#__PURE__*/_jsx("button", {
        children: "View Profile"
      })]
    })
  });
}
export default ProfileCard;

here it convert JSX to Proper JS


16th July


props and state

state allow components to update internal data dynamically while prop is for sending data from parent to child component

state - build in object in react component that hold data about the component . its mutable means we can update the value using this.setState in class and useState in functional
component .but state value is local and cannot access by child component unless its passed through props .whenever state value changes component will re render to reflect it. 

example

this.setState({      
    id: "2020"
});

this.setState({ id: this.state.id + 1 });

const [count, setCount] = useState(0);

when state changes, React gets informed and immediately re-renders the DOM – not the whole DOM, but only the component with the updated state


Props are used to pass data from a parent component to a child component . they cannot be modified by child component.
React’s data flow between components is uni-directional (from parent to child only).

example

class ParentComponent extends Component {    
    render() {    
        return (        
            <ChildComponent name="First Child" />    
        );  
    }
}

const ChildComponent = (props) => {    
    return <p>{props.name}</p>; 
};











